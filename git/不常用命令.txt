嵌入一个子模块
git submodules add /global-path-to/sub sub
git submodules init
cd sub
git checkout v1.0
cd ..
git add .gitmodoules
git add sub
克隆一个带子模块的项目
git submodules init
git submodules update
使用子模块的新版本
cd sub
git fetch
git checkout v2.0
cd ..
git add sub
git commit -m "new version of the submoudule"

嵌入一个子树
git subtree add --prefix=sub /global-path-to/sub v2.0
--squash 限制只获取特定的提交内容
git subtree add --squash -prefix=sub /global-path-to/sub master
更新一个已嵌入的子树
git subtree pull --prefix=sub /glob-path-to/sub v2.1
--squash 可以跳过模块版本库的历史记录
git subtree pull --squash --prefix=sub /glob-path-to/sub master
将模块目录中所发生的修改从其他修改中分离出来
git subtree split --rejoin --prefix sub --branch sub/master
合并模块版本库的修改，模块版本库中的本地修改必须跟远端的修改进行合并
git checkout sub/master
git fetch /global-path-to/sub master
git merge FETCH_HEAD
将修改传送到模块版本库中，并删除临时分支
git push /global-path-to/sub HEAD:master
git checkout master
git branch -d sub/master

查看一个分支的本地历史
git log --walk-reflogs mybrach

 忽略一些已被版本化的文件
 git update-index --assume-unchanged foo.txt
 停止忽略
 git update-index --no-assume-unchanged foo.txt
或者重置一下所有的文状态
git update-index --really-refresh

将提交移到另一分支
git rebase --interactive
pick 6a2f459 should stay in A 1
pick 05c2 should stay in A 2
exec git branch -f tmp/SPLIT
pick adsffaa should go to B 1
pick fafa should go to B 2
git checkout -B tmp/MOVE A
git rebase tmp/SPLIT --onto B
git checkout B
git merge --ff tmp/MOVE
git branch --force A tmp/SPLIT

GIT支持的几种不同的协议
file 经由共享网络设备访问
git 专用服务器的网络通信
http 经由web服务器访问
ssh 经由安全架构壳访问
对项目进行git版本化时需要对空目录进行处理
cd projecta/EmptyDir
touch .gitignore 或者 touch .gitkeep
设置行尾结束符
git config --global core.autocrlf true
使用git deamon
git deamon --base-path=/shared/gitrepos
访问url git://projeata.git
配置写权限
git deamon --base-path=/shared/gitrepos --enable=receive-pack




搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，
并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。
